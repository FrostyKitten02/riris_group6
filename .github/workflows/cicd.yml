name: CI/CD Pipeline

on:
  push:
    branches:
      - "main"
      - "production"
  pull_request:
    branches:
      - "main"
      - "production"
  workflow_dispatch:

jobs:
  frontend:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    strategy:
      matrix:
        node-version: [20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for frontend
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node_modules frontend  # Caching odvisnosti (frontend)
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install dependencies (frontend)
        working-directory: ./frontend
        run: npm install

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test -- --coverage

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            frontend/dist/

      - name: Upload frontend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./frontend/coverage/

  docker-build-frontend:
    needs: frontend
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend Docker image
        working-directory: ./frontend
        env:
          DOCKER_TAG: ${{ secrets.DOCKER_TAG }}
        run: |
          docker build -t afridau/afridau:frontend-${{ DOCKER_TAG }}-latest .
          docker tag afridau/afridau:frontend-${{ DOCKER_TAG }}-latest afridau/afridau:frontend-${{ DOCKER_TAG }}-${{ github.run_number }}
          docker push afridau/afridau:frontend-${{ DOCKER_TAG }}-latest
          docker push afridau/afridau:frontend-${{ DOCKER_TAG }}-${{ github.run_number }}

  deploy-frontend:
    needs: docker-build-frontend
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat >> ~/.ssh/config <<-END
            Host server
              HostName $SSH_HOST
              Port $SSH_PORT
              User $SSH_USER
              IdentityFile ~/.ssh/id_rsa
              StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          DOCKER_TAG: ${{ secrets.DOCKER_TAG }}
      - name: Transfer JSON Config to Server
        run: |
          echo '${{ secrets.FRONTEND_JSON_COFIG }}' > config.json
          scp config.json server:/opt/rirs/config.json
          scp config.json server:/opt/rirs/config.json
      - name: Deploy frontend docker image
        run: |
          ssh server << 'EOF'
            docker pull afridau/afridau:frontend-${{ DOCKER_TAG }}-latest
            docker stop rirs-f || true
            docker rm rirs-f || true
            docker run --restart unless-stopped -d -p 127.0.0.1:1000:80 --name rirs-f afridau/afridau:frontend-latest
            docker cp /opt/rirs/config.json rirs-f:/usr/share/nginx/html/conf.json
          EOF

  backend:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    strategy:
      matrix:
        node-version: [20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for backend
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node_modules backend  # Caching odvisnosti (frontend)
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: Install dependencies (backend)
        working-directory: ./backend
        run: npm install

      - name: Run backend tests
        working-directory: ./backend
        run: npm run test -- --coverage

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            backend/
            backend/node_modules/

      - name: Upload backend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: ./backend/coverage/

  docker-build-backend:
    needs: backend
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend Docker image
        working-directory: ./backend
        env:
          DOCKER_TAG: ${{ secrets.DOCKER_TAG }}
        run: |
          docker build -t afridau/afridau:backend-${{ DOCKER_TAG }}-latest .
          docker tag afridau/afridau:backend-${{ DOCKER_TAG }}-latest afridau/afridau:backend-${{ DOCKER_TAG }}-${{ github.run_number }}
          docker push afridau/afridau:backend-${{ DOCKER_TAG }}-latest
          docker push afridau/afridau:backend-${{ DOCKER_TAG }}-${{ github.run_number }}

  deploy-backend:
    needs: docker-build-backend
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat >> ~/.ssh/config <<-END
            Host server
              HostName $SSH_HOST
              Port $SSH_PORT
              User $SSH_USER
              IdentityFile ~/.ssh/id_rsa
              StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
      - name: Deploy backend docker image
        run: |
          ssh server << 'EOF'
            docker pull afridau/afridau:backend-${{ DOCKER_TAG }}-latest
            docker stop rirs-b || true
            docker rm rirs-b || true
            docker run --restart unless-stopped -d -p 127.0.0.1:1011:3000 --name rirs-b afridau/afridau:backend-${{ DOCKER_TAG }}-latest
          EOF

  upload-artifacts:
    needs: [frontend, backend]
    environment:
      name: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Download frontend coverage report
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: ./frontend-coverage

      - name: Download backend coverage report
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: ./backend-coverage
